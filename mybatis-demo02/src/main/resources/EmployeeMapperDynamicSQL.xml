<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shf.dao.EmployeeMapperDynamicSQL">
<!--    开启全局二级缓存配置-->
<!--    eviction 缓存回收策略-->
<!--    flushInterval 缓存刷新间隔-->
<!--    readOnly  缓存是否只读 true只读 false非只读-->
<!--    size-->
<!--    type-->
<!--    <cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024" />-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>

<!--    抽取可重用的sql片段 方便以后使用-->
<!--   引入重用sql片段 <include refid="insertColumn"/>-->
    <sql id="insertColumn">
            last_name,email,gender,d_id
    </sql>
    
<!--    两个内置参数-->
<!--    _parameter代表整个参数-->
<!--    _databaseId就是代表当前数据库的别名 oracle-->
<!--    bind 可以将OGNL表达式绑定到一个变量中，方便后来引用值-->
<!--    useCache="true" 开启二级缓存-->
<!--    flushCache="true"  每次自动清空一级缓存和二级缓存-->
    <select id="getEmpsTestInnerParameters" resultType="com.shf.bean.Employee">
        <bind name="_lastName" value="'%'+lastName+'%'"/>
        <if test="_databaseId=='mysql'">
            select * from tbl_employee
            <if test="_parameter!=null">where last_name like #{_lastName}</if>
        </if>
        <if test="_databaseId=='oracle'">
            select * from employee
        </if>
    </select>

<!--    批量保存-->
    <insert id="addEmps2">
        <foreach collection="emps" item="emp" separator=";">
            insert into tbl_employee(<include refid="insertColumn"/>) values
            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
        </foreach>
    </insert>
    <insert id="addEmps">
        insert into tbl_employee(last_name,email,gender,d_id) values
        <foreach collection="emps" item="emp" separator=",">
            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
        </foreach>
    </insert>

<!--    批量查询-->
<!--    collection指定要遍历的集合-->
<!--    list类型的参数会特殊处理封装在map中，map的key叫做list-->
<!--    item 将当前遍历出的元素赋值给指定的变量-->
<!--    separator 每个元素之间的分隔符-->
<!--    open  遍历出所有的结果拼接一个开始的字符-->
<!--    close  遍历出所有结果拼接一个结束的字符-->
<!--    index  索引  遍历list的时候index是索引,item就是值  遍历map的index是map的key，item就是map的值-->
<!--    #{变量名} 就能取出变量的值也就是当前遍历的元素-->
    <select id="getEmpByConditionForeach" resultType="com.shf.bean.Employee">
        select * from tbl_employee
        <foreach collection="ids" item="item_id" separator="," open=" where id in(" close=")">
            #{item_id}
        </foreach>
    </select>

<!--    批量更新-->
    <select id="updateEmp2">
        update tbl_employee
        <trim prefix="set" suffixOverrides=",">
            <if test="lastName!=null">last_name=#{lastName}</if>
            <if test="email!=null">email=#{email}</if>
            <if test="gender!=null">gender=#{gender}</if>
        </trim>
        where id=#{id}
    </select>
<!--    set标签的使用-->
    <select id="updateEmp">
        update tbl_employee
            <set>
                <if test="lastName!=null">last_name=#{lastName}</if>
                <if test="email!=null">email=#{email}</if>
                <if test="gender!=null">gender=#{gender}</if>
            </set>
        where id=#{id}
    </select>

    <select id="getEmpsByConditionChoose" resultType="com.shf.bean.Employee">
        select * from tbl_employee
        <where>
            <choose>
                <when test="id!=null">id=#{id}</when>
                <when test="lastName!=null">last_name like #{lastName}</when>
                <when test="email!=null">email=#{email}</when>
                <otherwise>
                    gender=0
                </otherwise>
            </choose>
        </where>
    </select>

<!--    if判断-->
<!--    trim  字符串截取 where set-->
<!--    choose  分支选择  switch-case  只会进入一个-->

<!--    后面多出的and或者or  where标签不能解决-->
<!--    prefix  前缀 trim标签体是整个字符串拼串 后的结果-->
<!--    prefixOverrides  前缀覆盖  去掉整个字符串前面多余的字符串-->
<!--    suffix  后缀 给拼串后整个字符串加一个后缀-->
<!--    suffixOverrides  后缀覆盖 去掉整个字符串后面多余的字符串-->
    <select id="getEmpsByConditionTrim" resultType="com.shf.bean.Employee">
        select * from tbl_employee
        <trim prefix="where" prefixOverrides="" suffix="" suffixOverrides="and">
            <if test="id!=null">
                id=#{id} and
            </if>
            <if test="lastName!=null and lastName!=&quot;&quot;">
                last_name like #{lastName} and
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                email=#{email} and
            </if>
            <if test="gender==0 or gender==1">
                and gender=#{gender}
            </if>
        </trim>
    </select>

    <select id="getEmpsByConditionIf" resultType="com.shf.bean.Employee">
        select * from tbl_employee
        <where>
            <if test="id!=null">
                id=#{id}
            </if>
            <if test="lastName!=null and lastName!=&quot;&quot;">
                and last_name like #{lastName}
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                and email=#{email}
            </if>
            <if test="gender==0 or gender==1">
                and gender=#{gender}
            </if>
        </where>
    </select>
</mapper>