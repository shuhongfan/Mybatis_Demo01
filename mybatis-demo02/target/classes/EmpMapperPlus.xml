<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shf.dao.EmpMapperPlus">
<!--    鉴别器 mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为-->
    <resultMap type="com.shf.bean.Employee" id="MyEmpDis">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <discriminator javaType="string" column="gender">
            <case value="0" resultType="com.shf.bean.Employee">
                <association property="dept" select="com.shf.dao.DepartmentMapper.getDeptById" column="d_id"/>
            </case>
            <case value="1" resultType="com.shf.bean.Employee">
                <id column="id" property="id"/>
                <result column="last_name" property="email"/>
                <result column="email" property="email"/>
            </case>
        </discriminator>
    </resultMap>

    <select id="getEmpsById" resultType="com.shf.bean.Employee">
        select * from tbl_employee where d_id=#{id}
    </select>

    <resultMap type="com.shf.bean.Employee" id="MyEmpByStep">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
<!--        使用association定义关联对象的封装规则-->
<!--        select 表明当前属性是调用select指定的方法查出的结果-->
<!--        column 指定将哪一列的值传给这个方法-->
<!--        使用select指定的方法 （传入column指定的这列参数的值） 查出对象，并封装给property指定的属性-->
        <association property="dept" select="com.shf.dao.DepartmentMapper.getDeptById" column="d_id"/>
    </resultMap>
    <select id="getEmpByIdStep" resultMap="MyEmpByStep">
        select * from tbl_employee where id=#{id}
    </select>

<!--    使用association定义关联的单个对象的封装规则-->
    <resultMap id="MyDifEmp2" type="com.shf.bean.Employee">
        <id column="id" property="id"></id>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
<!--        association 可以指定联合的JavaBean对象-->
<!--        property=“dept”  指定哪个属性是联合的对象-->
<!--        javaType 指定这个属性对象的类型  不能省略-->
        <association property="dept" javaType="com.shf.bean.Department">
            <id column="d_id" property="id"/>
            <result column="dept_name" property="dept_name"/>
        </association>
    </resultMap>
    <resultMap id="MyDifEmp" type="com.shf.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
<!--        使用级联属性赋值-->
        <result column="d_id" property="dept.id"/>
        <result column="dept_name" property="dept.dept_name"/>
    </resultMap>
    <select id="getEmpAndDept" resultMap="MyDifEmp2">
        select e.id id,e.email email,e.last_name last_name,e.gender gender,e.d_id d_id,d.dept_name dept_name from tbl_employee e,tbl_dept d where e.d_id=d.id and e.id=#{id}
    </select>

<!--    自定义某个JavaBean的封装规则-->
<!--    type 自定义规则的Java类型-->
<!--    id：唯一id方便使用-->
    <resultMap id="MyEmp" type="com.shf.bean.Employee">
<!--        指定主键列的封装规则-->
<!--        column  指定哪一列-->
<!--        property 指定对应的JavaBean属性-->
        <id column="id" property="id"/>
<!--        定义普通列封装规则-->
        <result column="last_name" property="lastName"/>
<!--        其他不指定的列会自动封装；我们只要写resultMap酒吧全部的映射规则都写上-->
    </resultMap>

    <select id="getEmpById" resultMap="MyEmp">
        select * from tbl_employee where id=#{id}
    </select>
</mapper>